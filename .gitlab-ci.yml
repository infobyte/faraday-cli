variables:
    TZ: "America/New_York"
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    APT_CACHE_DIR: "$CI_PROJECT_DIR/apt-cache"
    POSTGRES_DB: custom_db
    POSTGRES_USER: custom_user
    POSTGRES_PASSWORD: custom_pass
    FARADAY_USER: custom_user
    FARADAY_PASSWORD: custom_pass
    FARADAY_EMAIL: test@test.com
    FARADAY_URL: http://localhost:5985/
    DEFAULT_FARADAY_REF: white/dev

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - when: always

cache:
  paths:
    - "$CI_PROJECT_DIR/.cache/pip"
    - "$CI_PROJECT_DIR/apt-cache"


before_script:
    - mkdir -pv $APT_CACHE_DIR

stages:
    - testing
    - publish
    - deploy

services:
    - postgres:latest


flake8:
    image: python:3
    stage: .pre
    script:
      - pip install .[dev]
      - flake8 --max-line-length=120  --exclude hooks .


black:
    image: python:3
    stage: .pre
    script:
      - pip install .[dev]
      - black --line-length=120 --check .

.generate_license: &generate_license
  - mkdir -p ~/.faraday/doc
  - base64 -d $FARADAY_LICENSE_TAR_GZ > license.tgz
  - tar xzvf license.tgz -C ~/.faraday/doc


.unit_tests_base:
    stage: testing
    coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'
    script:
      - if [ $FARADAY_REF ]; then :; else export FARADAY_REF=$DEFAULT_FARADAY_REF; fi; echo FARADAY_REF=$FARADAY_REF
      - export LC_ALL=C.UTF-8
      - export LANG=C.UTF-8
      - pip3 install virtualenv
      - *generate_license

      - apt-get update -y
      - apt-get install pandoc libsasl2-dev python3-dev libldap2-dev libssl-dev -y

      - virtualenv faraday_venv
      - source faraday_venv/bin/activate
      - pip install pip -U
      - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/faradaysec/faraday.git
      - cd faraday && git checkout $FARADAY_REF
      - echo FARADAY_COMMIT=$(git rev-parse HEAD)
      - pip install --upgrade -r requirements.txt
      - pip install $PIP_INSTALL_FLAGS .
      - pip install --upgrade responses pytest-xdist pytest-cov
      - pip install --upgrade -r requirements_dev.txt
      - pip install pyyaml
      - mkdir -p ~/.faraday/config
      - mkdir -p ~/.faraday/doc
      - mkdir -p ~/.faraday/logs
      - cp tests/data/server.ini ~/.faraday/config
      - python3 ../tests/config/psql_config.py
      - pip install 'importlib-metadata<5.0'
      - faraday-manage create-tables
      - faraday-manage create-superuser --username $FARADAY_USER --password $FARADAY_PASSWORD --email $FARADAY_EMAIL
      - faraday-server &
      - deactivate
      - cd ..
      - virtualenv faraday_cli_venv
      - source faraday_cli_venv/bin/activate
      - git clone https://github.com/python-cmd2/cmd2.git
      - cd cmd2/plugins/ext_test
      - pip install .
      - cd ../../..
      - pip install $PIP_INSTALL_FLAGS .[test]
      - mkdir run_from
      - cd run_from && mkdir logs && pytest ../tests --capture=sys -v --cov=../faraday_cli --color=yes --disable-warnings --junitxml=../report.xml

    after_script:
      - cp ~/.faraday/logs/*.log run_from/logs/
    artifacts:
      reports:
        junit: report.xml
      paths:
        - dist/*
        - run_from/logs/*
      expire_in: 7 days
    rules:
      - when: on_success
    tags:
      - faradaytests

.latest_unit_test_base:
  extends: .unit_tests_base
  before_script:

.alpha_unit_test_base:
  extends: .unit_tests_base
  variables:
      PIP_INSTALL_FLAGS: --pre
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^(dev|master)$/'
      when: on_success
    - if: '$TEST_ALPHA'
      when: on_success

unit_tests:
  extends: .latest_unit_test_base
  parallel:
    matrix:
      - PYTHON_VERSION: "3.9-slim-bookworm"
      - PYTHON_VERSION: "3.10-slim-bookworm"
      - PYTHON_VERSION: "3.11-slim-bookworm"
      - PYTHON_VERSION: "3.12-slim-bookworm"
  image: python:${PYTHON_VERSION}
  allow_failure: true

alpha_unit_tests:
  extends: .alpha_unit_test_base
  parallel:
    matrix:
      - PYTHON_VERSION: "3.9-slim-bookworm"
      - PYTHON_VERSION: "3.10-slim-bookworm"
      - PYTHON_VERSION: "3.11-slim-bookworm"
      - PYTHON_VERSION: "3.12-slim-bookworm"
  image: python:${PYTHON_VERSION}


publish_pypi:
    image: python:3
    stage: publish
    script:
      - apt-get update -qy
      - apt-get install twine -y
      - pip install setuptools
      - python setup.py sdist bdist_wheel
      - twine upload -u $PYPI_USER -p $PYPI_PASS dist/* --verbose
    rules:
      - if: '$CI_COMMIT_TAG'
        when: on_success

include:
  - local: docs/.gitlab-ci.yml
